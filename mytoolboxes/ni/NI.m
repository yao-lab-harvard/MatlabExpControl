function [methodinfo,structs,enuminfo]=NI;
%This function was generated by the perl file prototypes.pl called from loadlibary.m on Thu Feb 12 10:04:59 2004
%perl options:'nidaq_win.i -outfile=NI.m'
fcns=[];structs=[];enuminfo=[];fcns.alias={};
%  extern i16 _stdcall AI_Change_Parameter ( i16 slot, i16 channel, u32 paramID, u32 paramValue); 
fcns.name{1}='AI_Change_Parameter'; fcns.calltype{1}='stdcall'; fcns.LHS{1}='int16'; fcns.RHS{1}={'int16', 'int16', 'uint32', 'uint32'};
%  extern i16 _stdcall AI_Check ( i16 slot, i16 * status, i16 * value); 
fcns.name{2}='AI_Check'; fcns.calltype{2}='stdcall'; fcns.LHS{2}='int16'; fcns.RHS{2}={'int16', 'int16Ptr', 'int16Ptr'};
%  extern i16 _stdcall AI_Clear ( i16 slot); 
fcns.name{3}='AI_Clear'; fcns.calltype{3}='stdcall'; fcns.LHS{3}='int16'; fcns.RHS{3}={'int16'};
%  extern i16 _stdcall AI_Configure ( i16 slot, i16 chan, i16 inputMode, i16 inputRange, i16 polarity, i16 driveAIS); 
fcns.name{4}='AI_Configure'; fcns.calltype{4}='stdcall'; fcns.LHS{4}='int16'; fcns.RHS{4}={'int16', 'int16', 'int16', 'int16', 'int16', 'int16'};
%  extern i16 _stdcall AI_Mux_Config ( i16 slot, i16 numMuxBrds); 
fcns.name{5}='AI_Mux_Config'; fcns.calltype{5}='stdcall'; fcns.LHS{5}='int16'; fcns.RHS{5}={'int16', 'int16'};
%  extern i16 _stdcall AI_Read ( i16 slot, i16 chan, i16 gain, i16 * value); 
fcns.name{6}='AI_Read'; fcns.calltype{6}='stdcall'; fcns.LHS{6}='int16'; fcns.RHS{6}={'int16', 'int16', 'int16', 'int16Ptr'};
%  extern i16 _stdcall AI_Read32 ( i16 slot, i16 chan, i16 gain, i32 * value); 
fcns.name{7}='AI_Read32'; fcns.calltype{7}='stdcall'; fcns.LHS{7}='int16'; fcns.RHS{7}={'int16', 'int16', 'int16', 'int32Ptr'};
%  extern i16 _stdcall AI_Setup ( i16 slot, i16 chan, i16 gain); 
fcns.name{8}='AI_Setup'; fcns.calltype{8}='stdcall'; fcns.LHS{8}='int16'; fcns.RHS{8}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall AI_VRead ( i16 slot, i16 chan, i16 gain, f64 * volts); 
fcns.name{9}='AI_VRead'; fcns.calltype{9}='stdcall'; fcns.LHS{9}='int16'; fcns.RHS{9}={'int16', 'int16', 'int16', 'doublePtr'};
%  extern i16 _stdcall AI_VScale ( i16 slot, i16 chan, i16 gain, f64 gainAdjust, f64 offset, i16 reading, f64 * voltage); 
fcns.name{10}='AI_VScale'; fcns.calltype{10}='stdcall'; fcns.LHS{10}='int16'; fcns.RHS{10}={'int16', 'int16', 'int16', 'double', 'double', 'int16', 'doublePtr'};
%  extern i16 _stdcall Align_DMA_Buffer ( i16 slot, i16 resource, i16 * buffer, u32 cnt, u32 bufSize, u32 * alignIndex); 
fcns.name{11}='Align_DMA_Buffer'; fcns.calltype{11}='stdcall'; fcns.LHS{11}='int16'; fcns.RHS{11}={'int16', 'int16', 'int16Ptr', 'uint32', 'uint32', 'uint32Ptr'};
%  extern i16 _stdcall AO_Calibrate ( i16 board, i16 operation, i16 EEPROMloc); 
fcns.name{12}='AO_Calibrate'; fcns.calltype{12}='stdcall'; fcns.LHS{12}='int16'; fcns.RHS{12}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall AO_Configure ( i16 slot, i16 chan, i16 outputPolarity, i16 IntOrExtRef, f64 refVoltage, i16 updateMode); 
fcns.name{13}='AO_Configure'; fcns.calltype{13}='stdcall'; fcns.LHS{13}='int16'; fcns.RHS{13}={'int16', 'int16', 'int16', 'int16', 'double', 'int16'};
%  extern i16 _stdcall AO_Change_Parameter ( i16 slot, i16 channel, u32 paramID, u32 paramValue); 
fcns.name{14}='AO_Change_Parameter'; fcns.calltype{14}='stdcall'; fcns.LHS{14}='int16'; fcns.RHS{14}={'int16', 'int16', 'uint32', 'uint32'};
%  extern i16 _stdcall AO_Update ( i16 slot); 
fcns.name{15}='AO_Update'; fcns.calltype{15}='stdcall'; fcns.LHS{15}='int16'; fcns.RHS{15}={'int16'};
%  extern i16 _stdcall AO_VWrite ( i16 slot, i16 chan, f64 voltage); 
fcns.name{16}='AO_VWrite'; fcns.calltype{16}='stdcall'; fcns.LHS{16}='int16'; fcns.RHS{16}={'int16', 'int16', 'double'};
%  extern i16 _stdcall AO_Write ( i16 slot, i16 chan, i16 value); 
fcns.name{17}='AO_Write'; fcns.calltype{17}='stdcall'; fcns.LHS{17}='int16'; fcns.RHS{17}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall Calibrate_E_Series ( i16 deviceNumber, u32 calOp, u32 setOfCalConst, f64 calRefVolts); 
fcns.name{18}='Calibrate_E_Series'; fcns.calltype{18}='stdcall'; fcns.LHS{18}='int16'; fcns.RHS{18}={'int16', 'uint32', 'uint32', 'double'};
%  extern i16 _stdcall Calibrate_59xx ( i16 deviceNumber, u32 operation, f64 refVoltage); 
fcns.name{19}='Calibrate_59xx'; fcns.calltype{19}='stdcall'; fcns.LHS{19}='int16'; fcns.RHS{19}={'int16', 'uint32', 'double'};
%  extern i16 _stdcall Calibrate_DSA ( i16 deviceNumber, u32 operation, f64 refVoltage); 
fcns.name{20}='Calibrate_DSA'; fcns.calltype{20}='stdcall'; fcns.LHS{20}='int16'; fcns.RHS{20}={'int16', 'uint32', 'double'};
%  extern i16 _stdcall Config_Alarm_Deadband ( i16 slot, i16 mode, i8 * chanStr, f64 trigLvl, f64 deadbandWidth, HWND handle, i16 alarmOnMsg, i16 alarmOffMsg, u32 callbackAddr); 
fcns.name{21}='Config_Alarm_Deadband'; fcns.calltype{21}='stdcall'; fcns.LHS{21}='int16'; fcns.RHS{21}={'int16', 'int16', 'int8Ptr', 'double', 'double', 'voidPtr', 'int16', 'int16', 'uint32'};
%  extern i16 _stdcall Config_ATrig_Event_Message ( i16 slot, i16 mode, i8 * chanStr, f64 trigLvl, f64 winSize, i16 trigSlope, u32 skipCnt, u32 preTrigScans, u32 postTrigScans, HWND handle, i16 msg, u32 callBackAddr); 
fcns.name{22}='Config_ATrig_Event_Message'; fcns.calltype{22}='stdcall'; fcns.LHS{22}='int16'; fcns.RHS{22}={'int16', 'int16', 'int8Ptr', 'double', 'double', 'int16', 'uint32', 'uint32', 'uint32', 'voidPtr', 'int16', 'uint32'};
%  extern i16 _stdcall Config_DAQ_Event_Message ( i16 slot, i16 mode, i8 * chanStr, i16 DAQEvent, i32 trigVal0, i32 trigVal1, u32 skipCnt, u32 preTrigScans, u32 postTrigScans, HWND handle, i16 msg, u32 callBackAddr); 
fcns.name{23}='Config_DAQ_Event_Message'; fcns.calltype{23}='stdcall'; fcns.LHS{23}='int16'; fcns.RHS{23}={'int16', 'int16', 'int8Ptr', 'int16', 'int32', 'int32', 'uint32', 'uint32', 'uint32', 'voidPtr', 'int16', 'uint32'};
%  extern i16 _stdcall Configure_HW_Analog_Trigger ( i16 deviceNumber, u32 onOrOff, i32 lowValue, i32 highValue, u32 mode, u32 trigSource); 
fcns.name{24}='Configure_HW_Analog_Trigger'; fcns.calltype{24}='stdcall'; fcns.LHS{24}='int16'; fcns.RHS{24}={'int16', 'uint32', 'int32', 'int32', 'uint32', 'uint32'};
%  extern i16 _stdcall CTR_Config ( i16 slot, i16 ctr, i16 edgeMode, i16 gateMode, i16 outType, i16 outPolarity); 
fcns.name{25}='CTR_Config'; fcns.calltype{25}='stdcall'; fcns.LHS{25}='int16'; fcns.RHS{25}={'int16', 'int16', 'int16', 'int16', 'int16', 'int16'};
%  extern i16 _stdcall CTR_EvCount ( i16 slot, i16 ctr, i16 timebase, i16 cont); 
fcns.name{26}='CTR_EvCount'; fcns.calltype{26}='stdcall'; fcns.LHS{26}='int16'; fcns.RHS{26}={'int16', 'int16', 'int16', 'int16'};
%  extern i16 _stdcall CTR_EvRead ( i16 slot, i16 ctr, i16 * overflow, u16 * counts); 
fcns.name{27}='CTR_EvRead'; fcns.calltype{27}='stdcall'; fcns.LHS{27}='int16'; fcns.RHS{27}={'int16', 'int16', 'int16Ptr', 'uint16Ptr'};
%  extern i16 _stdcall CTR_FOUT_Config ( i16 slot, i16 FOUT, i16 mode, i16 timebase, i16 division); 
fcns.name{28}='CTR_FOUT_Config'; fcns.calltype{28}='stdcall'; fcns.LHS{28}='int16'; fcns.RHS{28}={'int16', 'int16', 'int16', 'int16', 'int16'};
%  extern i16 _stdcall CTR_Period ( i16 slot, i16 ctr, i16 timebase); 
fcns.name{29}='CTR_Period'; fcns.calltype{29}='stdcall'; fcns.LHS{29}='int16'; fcns.RHS{29}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall CTR_Pulse ( i16 slot, i16 ctr, i16 timebase, u16 delay, u16 pulseWidth); 
fcns.name{30}='CTR_Pulse'; fcns.calltype{30}='stdcall'; fcns.LHS{30}='int16'; fcns.RHS{30}={'int16', 'int16', 'int16', 'uint16', 'uint16'};
%  extern i16 _stdcall CTR_Rate ( f64 freq, f64 duty, i16 * timebase, u16 * period1, u16 * period2); 
fcns.name{31}='CTR_Rate'; fcns.calltype{31}='stdcall'; fcns.LHS{31}='int16'; fcns.RHS{31}={'double', 'double', 'int16Ptr', 'uint16Ptr', 'uint16Ptr'};
%  extern i16 _stdcall CTR_Reset ( i16 slot, i16 ctr, i16 outState); 
fcns.name{32}='CTR_Reset'; fcns.calltype{32}='stdcall'; fcns.LHS{32}='int16'; fcns.RHS{32}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall CTR_Restart ( i16 slot, i16 ctr); 
fcns.name{33}='CTR_Restart'; fcns.calltype{33}='stdcall'; fcns.LHS{33}='int16'; fcns.RHS{33}={'int16', 'int16'};
%  extern i16 _stdcall CTR_Simul_Op ( i16 slot, i16 numCtrs, i16 * ctrList, i16 mode); 
fcns.name{34}='CTR_Simul_Op'; fcns.calltype{34}='stdcall'; fcns.LHS{34}='int16'; fcns.RHS{34}={'int16', 'int16', 'int16Ptr', 'int16'};
%  extern i16 _stdcall CTR_Square ( i16 slot, i16 ctr, i16 timebase, u16 period1, u16 period2); 
fcns.name{35}='CTR_Square'; fcns.calltype{35}='stdcall'; fcns.LHS{35}='int16'; fcns.RHS{35}={'int16', 'int16', 'int16', 'uint16', 'uint16'};
%  extern i16 _stdcall CTR_State ( i16 slot, i16 ctr, i16 * outState); 
fcns.name{36}='CTR_State'; fcns.calltype{36}='stdcall'; fcns.LHS{36}='int16'; fcns.RHS{36}={'int16', 'int16', 'int16Ptr'};
%  extern i16 _stdcall CTR_Stop ( i16 slot, i16 ctr); 
fcns.name{37}='CTR_Stop'; fcns.calltype{37}='stdcall'; fcns.LHS{37}='int16'; fcns.RHS{37}={'int16', 'int16'};
%  extern i16 _stdcall DAQ_Check ( i16 slot, i16 * progress, u32 * retrieved); 
fcns.name{38}='DAQ_Check'; fcns.calltype{38}='stdcall'; fcns.LHS{38}='int16'; fcns.RHS{38}={'int16', 'int16Ptr', 'uint32Ptr'};
%  extern i16 _stdcall DAQ_Clear ( i16 slot); 
fcns.name{39}='DAQ_Clear'; fcns.calltype{39}='stdcall'; fcns.LHS{39}='int16'; fcns.RHS{39}={'int16'};
%  extern i16 _stdcall DAQ_Config ( i16 slot, i16 startTrig, i16 extConv); 
fcns.name{40}='DAQ_Config'; fcns.calltype{40}='stdcall'; fcns.LHS{40}='int16'; fcns.RHS{40}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall DAQ_DB_Config ( i16 slot, i16 dbMode); 
fcns.name{41}='DAQ_DB_Config'; fcns.calltype{41}='stdcall'; fcns.LHS{41}='int16'; fcns.RHS{41}={'int16', 'int16'};
%  extern i16 _stdcall DAQ_DB_HalfReady ( i16 slot, i16 * halfReady, i16 * status); 
fcns.name{42}='DAQ_DB_HalfReady'; fcns.calltype{42}='stdcall'; fcns.LHS{42}='int16'; fcns.RHS{42}={'int16', 'int16Ptr', 'int16Ptr'};
%  extern i16 _stdcall DAQ_DB_Transfer ( i16 slot, i16 * hbuffer, u32 * ptsTfr, i16 * status); 
fcns.name{43}='DAQ_DB_Transfer'; fcns.calltype{43}='stdcall'; fcns.LHS{43}='int16'; fcns.RHS{43}={'int16', 'int16Ptr', 'uint32Ptr', 'int16Ptr'};
%  extern i16 _stdcall DAQ_Monitor ( i16 slot, i16 chan, i16 seq, u32 monitorCnt, i16 * monitorBuf, u32 * newestIndex, i16 * status); 
fcns.name{44}='DAQ_Monitor'; fcns.calltype{44}='stdcall'; fcns.LHS{44}='int16'; fcns.RHS{44}={'int16', 'int16', 'int16', 'uint32', 'int16Ptr', 'uint32Ptr', 'int16Ptr'};
%  extern i16 _stdcall DAQ_Op ( i16 slot, i16 chan, i16 gain, i16 * buffer, u32 cnt, f64 sampleRate); 
fcns.name{45}='DAQ_Op'; fcns.calltype{45}='stdcall'; fcns.LHS{45}='int16'; fcns.RHS{45}={'int16', 'int16', 'int16', 'int16Ptr', 'uint32', 'double'};
%  extern i16 _stdcall DAQ_Rate ( f64 rate, i16 units, i16 * timebase, u16 * sampleInt); 
fcns.name{46}='DAQ_Rate'; fcns.calltype{46}='stdcall'; fcns.LHS{46}='int16'; fcns.RHS{46}={'double', 'int16', 'int16Ptr', 'uint16Ptr'};
%  extern i16 _stdcall DAQ_Start ( i16 slot, i16 chan, i16 gain, i16 * buffer, u32 cnt, i16 timebase, u16 sampInt); 
fcns.name{47}='DAQ_Start'; fcns.calltype{47}='stdcall'; fcns.LHS{47}='int16'; fcns.RHS{47}={'int16', 'int16', 'int16', 'int16Ptr', 'uint32', 'int16', 'uint16'};
%  extern i16 _stdcall DAQ_StopTrigger_Config ( i16 slot, i16 preTrig, u32 preTrigCnt); 
fcns.name{48}='DAQ_StopTrigger_Config'; fcns.calltype{48}='stdcall'; fcns.LHS{48}='int16'; fcns.RHS{48}={'int16', 'int16', 'uint32'};
%  extern i16 _stdcall DAQ_to_Disk ( i16 slot, i16 chan, i16 gain, i8 * fileName, u32 cnt, f64 sampleRate, i16 concat); 
fcns.name{49}='DAQ_to_Disk'; fcns.calltype{49}='stdcall'; fcns.LHS{49}='int16'; fcns.RHS{49}={'int16', 'int16', 'int16', 'int8Ptr', 'uint32', 'double', 'int16'};
%  extern i16 _stdcall DAQ_VScale ( i16 slot, i16 chan, i16 gain, f64 gainAdjust, f64 offset, u32 cnt, i16 * binArray, f64 * voltArray); 
fcns.name{50}='DAQ_VScale'; fcns.calltype{50}='stdcall'; fcns.LHS{50}='int16'; fcns.RHS{50}={'int16', 'int16', 'int16', 'double', 'double', 'uint32', 'int16Ptr', 'doublePtr'};
%  extern i16 _stdcall DIG_Block_Check ( i16 slot, i16 grp, u32 * remaining); 
fcns.name{51}='DIG_Block_Check'; fcns.calltype{51}='stdcall'; fcns.LHS{51}='int16'; fcns.RHS{51}={'int16', 'int16', 'uint32Ptr'};
%  extern i16 _stdcall DIG_Block_Clear ( i16 slot, i16 grp); 
fcns.name{52}='DIG_Block_Clear'; fcns.calltype{52}='stdcall'; fcns.LHS{52}='int16'; fcns.RHS{52}={'int16', 'int16'};
%  extern i16 _stdcall DIG_Block_In ( i16 slot, i16 grp, i16 * buffer, u32 cnt); 
fcns.name{53}='DIG_Block_In'; fcns.calltype{53}='stdcall'; fcns.LHS{53}='int16'; fcns.RHS{53}={'int16', 'int16', 'int16Ptr', 'uint32'};
%  extern i16 _stdcall DIG_Block_Out ( i16 slot, i16 grp, i16 * buffer, u32 cnt); 
fcns.name{54}='DIG_Block_Out'; fcns.calltype{54}='stdcall'; fcns.LHS{54}='int16'; fcns.RHS{54}={'int16', 'int16', 'int16Ptr', 'uint32'};
%  extern i16 _stdcall DIG_Block_PG_Config ( i16 slot, i16 grp, i16 PGmode, i16 reqSource, i16 timebase, u16 interval, i16 externalGate); 
fcns.name{55}='DIG_Block_PG_Config'; fcns.calltype{55}='stdcall'; fcns.LHS{55}='int16'; fcns.RHS{55}={'int16', 'int16', 'int16', 'int16', 'int16', 'uint16', 'int16'};
%  extern i16 _stdcall DIG_DB_Config ( i16 slot, i16 grp, i16 DBMode, i16 oldDataStop, i16 partialTransfer); 
fcns.name{56}='DIG_DB_Config'; fcns.calltype{56}='stdcall'; fcns.LHS{56}='int16'; fcns.RHS{56}={'int16', 'int16', 'int16', 'int16', 'int16'};
%  extern i16 _stdcall DIG_DB_HalfReady ( i16 slot, i16 grp, i16 * halfReady); 
fcns.name{57}='DIG_DB_HalfReady'; fcns.calltype{57}='stdcall'; fcns.LHS{57}='int16'; fcns.RHS{57}={'int16', 'int16', 'int16Ptr'};
%  extern i16 _stdcall DIG_DB_Transfer ( i16 slot, i16 grp, i16 * halfBuffer, u32 ptsTfr); 
fcns.name{58}='DIG_DB_Transfer'; fcns.calltype{58}='stdcall'; fcns.LHS{58}='int16'; fcns.RHS{58}={'int16', 'int16', 'int16Ptr', 'uint32'};
%  extern i16 _stdcall DIG_Grp_Config ( i16 slot, i16 grp, i16 grpsize, i16 port, i16 direction); 
fcns.name{59}='DIG_Grp_Config'; fcns.calltype{59}='stdcall'; fcns.LHS{59}='int16'; fcns.RHS{59}={'int16', 'int16', 'int16', 'int16', 'int16'};
%  extern i16 _stdcall DIG_Grp_Mode ( i16 slot, i16 grp, i16 sigType, i16 edge, i16 reqpol, i16 ackpol, i16 settleTime); 
fcns.name{60}='DIG_Grp_Mode'; fcns.calltype{60}='stdcall'; fcns.LHS{60}='int16'; fcns.RHS{60}={'int16', 'int16', 'int16', 'int16', 'int16', 'int16', 'int16'};
%  extern i16 _stdcall DIG_Grp_Status ( i16 slot, i16 grp, i16 * status); 
fcns.name{61}='DIG_Grp_Status'; fcns.calltype{61}='stdcall'; fcns.LHS{61}='int16'; fcns.RHS{61}={'int16', 'int16', 'int16Ptr'};
%  extern i16 _stdcall DIG_In_Grp ( i16 slot, i16 grp, i16 * grp_pat); 
fcns.name{62}='DIG_In_Grp'; fcns.calltype{62}='stdcall'; fcns.LHS{62}='int16'; fcns.RHS{62}={'int16', 'int16', 'int16Ptr'};
%  extern i16 _stdcall DIG_In_Line ( i16 slot, i16 port, i16 linenum, i16 * state); 
fcns.name{63}='DIG_In_Line'; fcns.calltype{63}='stdcall'; fcns.LHS{63}='int16'; fcns.RHS{63}={'int16', 'int16', 'int16', 'int16Ptr'};
%  extern i16 _stdcall Query_Optimizations_GFS ( i16 device); 
fcns.name{64}='Query_Optimizations_GFS'; fcns.calltype{64}='stdcall'; fcns.LHS{64}='int16'; fcns.RHS{64}={'int16'};
%  extern i16 _stdcall DIG_In_Port_GFS ( i16 slot, i16 port, i16 * pattern); 
fcns.name{65}='DIG_In_Port_GFS'; fcns.calltype{65}='stdcall'; fcns.LHS{65}='int16'; fcns.RHS{65}={'int16', 'int16', 'int16Ptr'};
%  extern i16 _stdcall DIG_In_Port ( i16 slot, i16 port, i16 * pattern); 
fcns.name{66}='DIG_In_Port'; fcns.calltype{66}='stdcall'; fcns.LHS{66}='int16'; fcns.RHS{66}={'int16', 'int16', 'int16Ptr'};
%  extern i16 _stdcall DIG_Line_Config ( i16 slot, i16 port, i16 linenum, i16 direction); 
fcns.name{67}='DIG_Line_Config'; fcns.calltype{67}='stdcall'; fcns.LHS{67}='int16'; fcns.RHS{67}={'int16', 'int16', 'int16', 'int16'};
%  extern i16 _stdcall DIG_Out_Grp ( i16 slot, i16 grp, i16 grp_pat); 
fcns.name{68}='DIG_Out_Grp'; fcns.calltype{68}='stdcall'; fcns.LHS{68}='int16'; fcns.RHS{68}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall DIG_Out_Line ( i16 slot, i16 port, i16 linenum, i16 state); 
fcns.name{69}='DIG_Out_Line'; fcns.calltype{69}='stdcall'; fcns.LHS{69}='int16'; fcns.RHS{69}={'int16', 'int16', 'int16', 'int16'};
%  extern i16 _stdcall DIG_Out_Port_GFS ( i16 slot, i16 port, i16 pattern); 
fcns.name{70}='DIG_Out_Port_GFS'; fcns.calltype{70}='stdcall'; fcns.LHS{70}='int16'; fcns.RHS{70}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall DIG_Out_Port ( i16 slot, i16 port, i16 pattern); 
fcns.name{71}='DIG_Out_Port'; fcns.calltype{71}='stdcall'; fcns.LHS{71}='int16'; fcns.RHS{71}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall DIG_Prt_Config ( i16 slot, i16 port, i16 latch_mode, i16 direction); 
fcns.name{72}='DIG_Prt_Config'; fcns.calltype{72}='stdcall'; fcns.LHS{72}='int16'; fcns.RHS{72}={'int16', 'int16', 'int16', 'int16'};
%  extern i16 _stdcall DIG_Prt_Status ( i16 slot, i16 port, i16 * status); 
fcns.name{73}='DIG_Prt_Status'; fcns.calltype{73}='stdcall'; fcns.LHS{73}='int16'; fcns.RHS{73}={'int16', 'int16', 'int16Ptr'};
%  extern i16 _stdcall DIG_SCAN_Setup ( i16 slot, i16 grp, i16 numPorts, i16 * portList, i16 direction); 
fcns.name{74}='DIG_SCAN_Setup'; fcns.calltype{74}='stdcall'; fcns.LHS{74}='int16'; fcns.RHS{74}={'int16', 'int16', 'int16', 'int16Ptr', 'int16'};
%  extern i16 _stdcall Get_DAQ_Device_Info ( i16 deviceNumber, u32 infoType, u32 * infoVal); 
fcns.name{75}='Get_DAQ_Device_Info'; fcns.calltype{75}='stdcall'; fcns.LHS{75}='int16'; fcns.RHS{75}={'int16', 'uint32', 'uint32Ptr'};
%  extern i16 _stdcall Get_NI_DAQ_Version ( u32 * version); 
fcns.name{76}='Get_NI_DAQ_Version'; fcns.calltype{76}='stdcall'; fcns.LHS{76}='int16'; fcns.RHS{76}={'uint32Ptr'};
%  extern i16 _stdcall GPCTR_Config_Buffer ( i16 deviceNumber, u32 gpCounterNumber, u32 reserved, u32 numPoints, u32 * buffer); 
fcns.name{77}='GPCTR_Config_Buffer'; fcns.calltype{77}='stdcall'; fcns.LHS{77}='int16'; fcns.RHS{77}={'int16', 'uint32', 'uint32', 'uint32', 'uint32Ptr'};
%  extern i16 _stdcall GPCTR_Read_Buffer ( i16 deviceNumber, u32 gpCounterNumber, u32 readMode, i32 readOffset, u32 numPointsToRead, f64 timeOut, u32 * numPointsRead, u32 * buffer); 
fcns.name{78}='GPCTR_Read_Buffer'; fcns.calltype{78}='stdcall'; fcns.LHS{78}='int16'; fcns.RHS{78}={'int16', 'uint32', 'uint32', 'int32', 'uint32', 'double', 'uint32Ptr', 'uint32Ptr'};
%  extern i16 _stdcall Line_Change_Attribute ( i16 deviceNumber, u32 lineNumber, u32 attribID, u32 attribValue); 
fcns.name{79}='Line_Change_Attribute'; fcns.calltype{79}='stdcall'; fcns.LHS{79}='int16'; fcns.RHS{79}={'int16', 'uint32', 'uint32', 'uint32'};
%  extern i16 _stdcall GPCTR_Control ( i16 deviceNumber, u32 gpCounterNumber, u32 action); 
fcns.name{80}='GPCTR_Control'; fcns.calltype{80}='stdcall'; fcns.LHS{80}='int16'; fcns.RHS{80}={'int16', 'uint32', 'uint32'};
%  extern i16 _stdcall GPCTR_Set_Application ( i16 deviceNumber, u32 gpCounterNumber, u32 application); 
fcns.name{81}='GPCTR_Set_Application'; fcns.calltype{81}='stdcall'; fcns.LHS{81}='int16'; fcns.RHS{81}={'int16', 'uint32', 'uint32'};
%  extern i16 _stdcall GPCTR_Watch ( i16 deviceNumber, u32 gpCounterNumber, u32 watchID, u32 * watchValue); 
fcns.name{82}='GPCTR_Watch'; fcns.calltype{82}='stdcall'; fcns.LHS{82}='int16'; fcns.RHS{82}={'int16', 'uint32', 'uint32', 'uint32Ptr'};
%  extern i16 _stdcall ICTR_Read ( i16 slot, i16 counter, u16 * cnt); 
fcns.name{83}='ICTR_Read'; fcns.calltype{83}='stdcall'; fcns.LHS{83}='int16'; fcns.RHS{83}={'int16', 'int16', 'uint16Ptr'};
%  extern i16 _stdcall ICTR_Reset ( i16 slot, i16 counter, i16 state); 
fcns.name{84}='ICTR_Reset'; fcns.calltype{84}='stdcall'; fcns.LHS{84}='int16'; fcns.RHS{84}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall ICTR_Setup ( i16 slot, i16 counter, i16 mode, u16 cnt, i16 binBCD); 
fcns.name{85}='ICTR_Setup'; fcns.calltype{85}='stdcall'; fcns.LHS{85}='int16'; fcns.RHS{85}={'int16', 'int16', 'int16', 'uint16', 'int16'};
%  extern i16 _stdcall Init_DA_Brds ( i16 slot, i16 * brdCode); 
fcns.name{86}='Init_DA_Brds'; fcns.calltype{86}='stdcall'; fcns.LHS{86}='int16'; fcns.RHS{86}={'int16', 'int16Ptr'};
%  extern i16 _stdcall Lab_ISCAN_Check ( i16 slot, i16 * status, u32 * retrieved, i16 * finalScanOrder); 
fcns.name{87}='Lab_ISCAN_Check'; fcns.calltype{87}='stdcall'; fcns.LHS{87}='int16'; fcns.RHS{87}={'int16', 'int16Ptr', 'uint32Ptr', 'int16Ptr'};
%  extern i16 _stdcall Lab_ISCAN_Op ( i16 slot, i16 numChans, i16 gain, i16 * buffer, u32 cnt, f64 sampleRate, f64 scanRate, i16 * finalScanOrder); 
fcns.name{88}='Lab_ISCAN_Op'; fcns.calltype{88}='stdcall'; fcns.LHS{88}='int16'; fcns.RHS{88}={'int16', 'int16', 'int16', 'int16Ptr', 'uint32', 'double', 'double', 'int16Ptr'};
%  extern i16 _stdcall Lab_ISCAN_Start ( i16 slot, i16 numChans, i16 gain, i16 * buffer, u32 cnt, i16 timebase, u16 sampleInt, u16 scanInt); 
fcns.name{89}='Lab_ISCAN_Start'; fcns.calltype{89}='stdcall'; fcns.LHS{89}='int16'; fcns.RHS{89}={'int16', 'int16', 'int16', 'int16Ptr', 'uint32', 'int16', 'uint16', 'uint16'};
%  extern i16 _stdcall Lab_ISCAN_to_Disk ( i16 slot, i16 numChans, i16 gain, i8 * fileName, u32 cnt, f64 sampleRate, f64 scanRate, i16 concat); 
fcns.name{90}='Lab_ISCAN_to_Disk'; fcns.calltype{90}='stdcall'; fcns.LHS{90}='int16'; fcns.RHS{90}={'int16', 'int16', 'int16', 'int8Ptr', 'uint32', 'double', 'double', 'int16'};
%  extern i16 _stdcall LPM16_Calibrate ( i16 slot); 
fcns.name{91}='LPM16_Calibrate'; fcns.calltype{91}='stdcall'; fcns.LHS{91}='int16'; fcns.RHS{91}={'int16'};
%  extern i16 _stdcall MIO_Config ( i16 slot, i16 dither, i16 useAMUX); 
fcns.name{92}='MIO_Config'; fcns.calltype{92}='stdcall'; fcns.LHS{92}='int16'; fcns.RHS{92}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall RTSI_Clear ( i16 slot); 
fcns.name{93}='RTSI_Clear'; fcns.calltype{93}='stdcall'; fcns.LHS{93}='int16'; fcns.RHS{93}={'int16'};
%  extern i16 _stdcall RTSI_Clock ( i16 slot, i16 connect, i16 direction); 
fcns.name{94}='RTSI_Clock'; fcns.calltype{94}='stdcall'; fcns.LHS{94}='int16'; fcns.RHS{94}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall RTSI_Conn ( i16 slot, i16 brdSignal, i16 busLine, i16 direction); 
fcns.name{95}='RTSI_Conn'; fcns.calltype{95}='stdcall'; fcns.LHS{95}='int16'; fcns.RHS{95}={'int16', 'int16', 'int16', 'int16'};
%  extern i16 _stdcall RTSI_DisConn ( i16 slot, i16 brdSignal, i16 busLine); 
fcns.name{96}='RTSI_DisConn'; fcns.calltype{96}='stdcall'; fcns.LHS{96}='int16'; fcns.RHS{96}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall SC_2040_Config ( i16 deviceNumber, i16 channel, i16 sc2040Gain); 
fcns.name{97}='SC_2040_Config'; fcns.calltype{97}='stdcall'; fcns.LHS{97}='int16'; fcns.RHS{97}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall SCAN_Demux ( i16 * buffer, u32 cnt, i16 numChans, i16 muxMode); 
fcns.name{98}='SCAN_Demux'; fcns.calltype{98}='stdcall'; fcns.LHS{98}='int16'; fcns.RHS{98}={'int16Ptr', 'uint32', 'int16', 'int16'};
%  extern i16 _stdcall SCAN_Op ( i16 slot, i16 numChans, i16 * chans, i16 * gains, i16 * buffer, u32 cnt, f64 sampleRate, f64 scanRate); 
fcns.name{99}='SCAN_Op'; fcns.calltype{99}='stdcall'; fcns.LHS{99}='int16'; fcns.RHS{99}={'int16', 'int16', 'int16Ptr', 'int16Ptr', 'int16Ptr', 'uint32', 'double', 'double'};
%  extern i16 _stdcall SCAN_Sequence_Demux ( i16 numChans, i16 * chanVector, u32 bufferSize, i16 * buffer, i16 samplesPerSequence, i16 * scanSequenceVector, u32 * samplesPerChanVector); 
fcns.name{100}='SCAN_Sequence_Demux'; fcns.calltype{100}='stdcall'; fcns.LHS{100}='int16'; fcns.RHS{100}={'int16', 'int16Ptr', 'uint32', 'int16Ptr', 'int16', 'int16Ptr', 'uint32Ptr'};
%  extern i16 _stdcall SCAN_Sequence_Retrieve ( i16 deviceNumber, i16 samplesPerSequence, i16 * scanSequenceVector); 
fcns.name{101}='SCAN_Sequence_Retrieve'; fcns.calltype{101}='stdcall'; fcns.LHS{101}='int16'; fcns.RHS{101}={'int16', 'int16', 'int16Ptr'};
%  extern i16 _stdcall SCAN_Sequence_Setup ( i16 deviceNumber, i16 numChans, i16 * chanVector, i16 * gainVector, i16 * scanRateDivVector, i16 * scansPerSequence, i16 * samplesPerSequence); 
fcns.name{102}='SCAN_Sequence_Setup'; fcns.calltype{102}='stdcall'; fcns.LHS{102}='int16'; fcns.RHS{102}={'int16', 'int16', 'int16Ptr', 'int16Ptr', 'int16Ptr', 'int16Ptr', 'int16Ptr'};
%  extern i16 _stdcall SCAN_Setup ( i16 slot, i16 num_chans, i16 * chans, i16 * gains); 
fcns.name{103}='SCAN_Setup'; fcns.calltype{103}='stdcall'; fcns.LHS{103}='int16'; fcns.RHS{103}={'int16', 'int16', 'int16Ptr', 'int16Ptr'};
%  extern i16 _stdcall SCAN_Start ( i16 slot, i16 * buffer, u32 cnt, i16 tb1, u16 si1, i16 tb2, u16 si2); 
fcns.name{104}='SCAN_Start'; fcns.calltype{104}='stdcall'; fcns.LHS{104}='int16'; fcns.RHS{104}={'int16', 'int16Ptr', 'uint32', 'int16', 'uint16', 'int16', 'uint16'};
%  extern i16 _stdcall SCAN_to_Disk ( i16 slot, i16 numChans, i16 * chans, i16 * gains, i8 * fileName, u32 cnt, f64 sampleRate, f64 scanRate, i16 concat); 
fcns.name{105}='SCAN_to_Disk'; fcns.calltype{105}='stdcall'; fcns.LHS{105}='int16'; fcns.RHS{105}={'int16', 'int16', 'int16Ptr', 'int16Ptr', 'int8Ptr', 'uint32', 'double', 'double', 'int16'};
%  extern i16 _stdcall Calibrate_1200 ( i16 deviceNumber, i16 calOP, i16 saveNewCal, i16 EEPROMloc, i16 calRefChan, i16 grndRefChan, i16 DAC0chan, i16 DAC1chan, f64 calRefVolts, f64 gain); 
fcns.name{106}='Calibrate_1200'; fcns.calltype{106}='stdcall'; fcns.LHS{106}='int16'; fcns.RHS{106}={'int16', 'int16', 'int16', 'int16', 'int16', 'int16', 'int16', 'int16', 'double', 'double'};
%  extern i16 _stdcall SCXI_AO_Write ( i16 chassisID, i16 moduleSlot, i16 DACchannel, i16 opCode, i16 rangeCode, f64 voltCurrentData, i16 binaryDat, i16 * binaryWritten); 
fcns.name{107}='SCXI_AO_Write'; fcns.calltype{107}='stdcall'; fcns.LHS{107}='int16'; fcns.RHS{107}={'int16', 'int16', 'int16', 'int16', 'int16', 'double', 'int16', 'int16Ptr'};
%  extern i16 _stdcall SCXI_Cal_Constants ( i16 chassisID, i16 moduleSlot, i16 SCXIchannel, i16 operation, i16 calArea, i16 rangeCode, f64 SCXIgain, i16 DAQdevice, i16 DAQchannel, i16 DAQgain, f64 TBgain, f64 volt1, f64 binary1, f64 volt2, f64 binary2, f64 * binEEprom1, f64 * binEEprom2); 
fcns.name{108}='SCXI_Cal_Constants'; fcns.calltype{108}='stdcall'; fcns.LHS{108}='int16'; fcns.RHS{108}={'int16', 'int16', 'int16', 'int16', 'int16', 'int16', 'double', 'int16', 'int16', 'int16', 'double', 'double', 'double', 'double', 'double', 'doublePtr', 'doublePtr'};
%  extern i16 _stdcall InitChannelWizardStrainCal ( i16 chassisID, i16 moduleSlot, i16 moduleChan, i16 device, f32 loLim, f32 hiLim, f64 * moduleGain, i16 * DAQgain, i16 * DAQchan, f32 excitation, i16 connectionType); 
fcns.name{109}='InitChannelWizardStrainCal'; fcns.calltype{109}='stdcall'; fcns.LHS{109}='int16'; fcns.RHS{109}={'int16', 'int16', 'int16', 'int16', 'single', 'single', 'doublePtr', 'int16Ptr', 'int16Ptr', 'single', 'int16'};
%  extern i16 _stdcall ChannelWizardSCXIStrainCal ( i16 chassisID, i16 moduleSlot, i16 moduleChan, i16 device, i16 DAQchan, f64 moduleGain, i16 DAQgain, u8 engageShuntA, u8 engageShuntB, f64 * voltage, f64 * pos_excitation, f64 * neg_excitation); 
fcns.name{110}='ChannelWizardSCXIStrainCal'; fcns.calltype{110}='stdcall'; fcns.LHS{110}='int16'; fcns.RHS{110}={'int16', 'int16', 'int16', 'int16', 'int16', 'double', 'int16', 'uint8', 'uint8', 'doublePtr', 'doublePtr', 'doublePtr'};
%  extern i16 _stdcall SCXI_1520_Transducer_Cal ( i16 chassisID, i16 moduleSlot, i16 moduleChan, f64 SCXIgain, i16 DAQdevice, i16 DAQchan); 
fcns.name{111}='SCXI_1520_Transducer_Cal'; fcns.calltype{111}='stdcall'; fcns.LHS{111}='int16'; fcns.RHS{111}={'int16', 'int16', 'int16', 'double', 'int16', 'int16'};
%  extern i16 _stdcall SCXI_Calibrate ( i16 chassisID, i16 moduleSlot, i16 moduleChan, i16 operation, i16 calArea, f64 SCXIgain, f64 inputRefVoltage, i16 DAQdevice, i16 DAQchan); 
fcns.name{112}='SCXI_Calibrate'; fcns.calltype{112}='stdcall'; fcns.LHS{112}='int16'; fcns.RHS{112}={'int16', 'int16', 'int16', 'int16', 'int16', 'double', 'double', 'int16', 'int16'};
%  extern i16 _stdcall SCXI_Strain_Null ( i16 chassisID, i16 slot, i16 moduleChan, i16 device, i16 DAQchan, f32 * imbalances); 
fcns.name{113}='SCXI_Strain_Null'; fcns.calltype{113}='stdcall'; fcns.LHS{113}='int16'; fcns.RHS{113}={'int16', 'int16', 'int16', 'int16', 'int16', 'singlePtr'};
%  extern i16 _stdcall SCXI_Strain_Null_Ex ( i16 chassisID, i16 slot, i16 moduleChan, i16 device, i16 DAQchan, f32 * imbalances, f32 excitation, u32 bridgeType, i16 * finePot, i16 * coarsePot); 
fcns.name{114}='SCXI_Strain_Null_Ex'; fcns.calltype{114}='stdcall'; fcns.LHS{114}='int16'; fcns.RHS{114}={'int16', 'int16', 'int16', 'int16', 'int16', 'singlePtr', 'single', 'uint32', 'int16Ptr', 'int16Ptr'};
%  extern i16 _stdcall SCXI_Calibrate_Setup ( i16 chassisID, i16 moduleSlot, i16 calOp); 
fcns.name{115}='SCXI_Calibrate_Setup'; fcns.calltype{115}='stdcall'; fcns.LHS{115}='int16'; fcns.RHS{115}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall SCXI_Change_Chan ( i16 chassisID, i16 moduleSlot, i16 chan); 
fcns.name{116}='SCXI_Change_Chan'; fcns.calltype{116}='stdcall'; fcns.LHS{116}='int16'; fcns.RHS{116}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall SCXI_Set_Potentiometer ( i16 chassisID, i16 moduleSlot, i16 channel, u16 value, u8 pottype); 
fcns.name{117}='SCXI_Set_Potentiometer'; fcns.calltype{117}='stdcall'; fcns.LHS{117}='int16'; fcns.RHS{117}={'int16', 'int16', 'int16', 'uint16', 'uint8'};
%  extern i16 _stdcall SCXI_Set_Excitation ( i16 chassisID, i16 moduleSlot, i16 channel, i16 excitationType, f32 excitation, f32 * actualExcitation); 
fcns.name{118}='SCXI_Set_Excitation'; fcns.calltype{118}='stdcall'; fcns.LHS{118}='int16'; fcns.RHS{118}={'int16', 'int16', 'int16', 'int16', 'single', 'singlePtr'};
%  extern i16 _stdcall SCXI_Configure_Connection ( i16 chassisID, i16 moduleSlot, i16 channel, i16 connectionType); 
fcns.name{119}='SCXI_Configure_Connection'; fcns.calltype{119}='stdcall'; fcns.LHS{119}='int16'; fcns.RHS{119}={'int16', 'int16', 'int16', 'int16'};
%  extern i16 _stdcall SCXI_Configure_Filter ( i16 chassisID, i16 moduleSlot, i16 channel, i16 filterMode, f64 freq, u16 cutoffDivDown, u16 outClkDivDown, f64 * actFreq); 
fcns.name{120}='SCXI_Configure_Filter'; fcns.calltype{120}='stdcall'; fcns.LHS{120}='int16'; fcns.RHS{120}={'int16', 'int16', 'int16', 'int16', 'double', 'uint16', 'uint16', 'doublePtr'};
%  extern i16 _stdcall SCXI_Get_Chassis_Info ( i16 chassisID, i16 * chassisType, i16 * address, i16 * commMode, i16 * commPath, i16 * numSlots); 
fcns.name{121}='SCXI_Get_Chassis_Info'; fcns.calltype{121}='stdcall'; fcns.LHS{121}='int16'; fcns.RHS{121}={'int16', 'int16Ptr', 'int16Ptr', 'int16Ptr', 'int16Ptr', 'int16Ptr'};
%  extern i16 _stdcall SCXI_Get_Module_Info ( i16 chassisID, i16 slot, i32 * modulePresent, i16 * opMode, i16 * DAQboard); 
fcns.name{122}='SCXI_Get_Module_Info'; fcns.calltype{122}='stdcall'; fcns.LHS{122}='int16'; fcns.RHS{122}={'int16', 'int16', 'int32Ptr', 'int16Ptr', 'int16Ptr'};
%  extern i16 _stdcall SCXI_Get_State ( i16 chassisID, i16 moduleSlot, i16 port, i16 channel, u32 * data); 
fcns.name{123}='SCXI_Get_State'; fcns.calltype{123}='stdcall'; fcns.LHS{123}='int16'; fcns.RHS{123}={'int16', 'int16', 'int16', 'int16', 'uint32Ptr'};
%  extern i16 _stdcall SCXI_Get_Status ( i16 chassisID, i16 moduleSlot, i16 wait, u32 * data); 
fcns.name{124}='SCXI_Get_Status'; fcns.calltype{124}='stdcall'; fcns.LHS{124}='int16'; fcns.RHS{124}={'int16', 'int16', 'int16', 'uint32Ptr'};
%  extern i16 _stdcall SCXI_Load_Config ( i16 chassisID); 
fcns.name{125}='SCXI_Load_Config'; fcns.calltype{125}='stdcall'; fcns.LHS{125}='int16'; fcns.RHS{125}={'int16'};
%  extern i16 _stdcall SCXI_MuxCtr_Setup ( i16 slot, i16 enable, i16 scanDiv, u16 muxCtrVal); 
fcns.name{126}='SCXI_MuxCtr_Setup'; fcns.calltype{126}='stdcall'; fcns.LHS{126}='int16'; fcns.RHS{126}={'int16', 'int16', 'int16', 'uint16'};
%  extern i16 _stdcall SCXI_Reset ( i16 chassisID, i16 moduleSlot); 
fcns.name{127}='SCXI_Reset'; fcns.calltype{127}='stdcall'; fcns.LHS{127}='int16'; fcns.RHS{127}={'int16', 'int16'};
%  extern i16 _stdcall SCXI_Scale ( i16 chassisID, i16 moduleSlot, i16 SCXIchannel, f64 SCXIgain, f64 TBgain, i16 DAQdevice, i16 DAQchannel, i16 DAQgain, u32 numPoints, i16 * binArray, f64 * voltArray); 
fcns.name{128}='SCXI_Scale'; fcns.calltype{128}='stdcall'; fcns.LHS{128}='int16'; fcns.RHS{128}={'int16', 'int16', 'int16', 'double', 'double', 'int16', 'int16', 'int16', 'uint32', 'int16Ptr', 'doublePtr'};
%  extern i16 _stdcall SCXI_SCAN_Setup ( i16 chassisID, i16 numModules, i16 * modules, i16 * numChans, i16 * startChans, i16 DAQboard, i16 modeFlag); 
fcns.name{129}='SCXI_SCAN_Setup'; fcns.calltype{129}='stdcall'; fcns.LHS{129}='int16'; fcns.RHS{129}={'int16', 'int16', 'int16Ptr', 'int16Ptr', 'int16Ptr', 'int16', 'int16'};
%  extern i16 _stdcall SCXI_Set_Config ( i16 chassisID, i16 chassisType, i16 address, i16 commMode, i16 slotOrCOMM, i16 numSlots, i32 * moduleTypes, i16 * opModes, i16 * DAQboards); 
fcns.name{130}='SCXI_Set_Config'; fcns.calltype{130}='stdcall'; fcns.LHS{130}='int16'; fcns.RHS{130}={'int16', 'int16', 'int16', 'int16', 'int16', 'int16', 'int32Ptr', 'int16Ptr', 'int16Ptr'};
%  extern i16 _stdcall SCXI_Set_Gain ( i16 chassisID, i16 moduleSlot, i16 channel, f64 gain); 
fcns.name{131}='SCXI_Set_Gain'; fcns.calltype{131}='stdcall'; fcns.LHS{131}='int16'; fcns.RHS{131}={'int16', 'int16', 'int16', 'double'};
%  extern i16 _stdcall SCXI_Set_Input_Mode ( i16 chassisID, i16 moduleSlot, i16 inputMode); 
fcns.name{132}='SCXI_Set_Input_Mode'; fcns.calltype{132}='stdcall'; fcns.LHS{132}='int16'; fcns.RHS{132}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall SCXI_Set_State ( i16 chassisID, i16 moduleSlot, i16 port, i16 channel, u32 data); 
fcns.name{133}='SCXI_Set_State'; fcns.calltype{133}='stdcall'; fcns.LHS{133}='int16'; fcns.RHS{133}={'int16', 'int16', 'int16', 'int16', 'uint32'};
%  extern i16 _stdcall SCXI_Single_Chan_Setup ( i16 chassisID, i16 moduleSlot, i16 chan, i16 DAQboard); 
fcns.name{134}='SCXI_Single_Chan_Setup'; fcns.calltype{134}='stdcall'; fcns.LHS{134}='int16'; fcns.RHS{134}={'int16', 'int16', 'int16', 'int16'};
%  extern i16 _stdcall SCXI_Track_Hold_Control ( i16 chassisID, i16 moduleSlot, i16 state, i16 DAQboard); 
fcns.name{135}='SCXI_Track_Hold_Control'; fcns.calltype{135}='stdcall'; fcns.LHS{135}='int16'; fcns.RHS{135}={'int16', 'int16', 'int16', 'int16'};
%  extern i16 _stdcall SCXI_Track_Hold_Setup ( i16 chassisID, i16 moduleSlot, i16 mode, i16 source, i16 send, i16 holdCnt, i16 DAQboard); 
fcns.name{136}='SCXI_Track_Hold_Setup'; fcns.calltype{136}='stdcall'; fcns.LHS{136}='int16'; fcns.RHS{136}={'int16', 'int16', 'int16', 'int16', 'int16', 'int16', 'int16'};
%  extern i16 _stdcall Select_Signal ( i16 deviceNumber, u32 signal, u32 source, u32 sourceSpec); 
fcns.name{137}='Select_Signal'; fcns.calltype{137}='stdcall'; fcns.LHS{137}='int16'; fcns.RHS{137}={'int16', 'uint32', 'uint32', 'uint32'};
%  extern i16 _stdcall Set_DAQ_Device_Info ( i16 deviceNumber, u32 infoType, u32 infoVal); 
fcns.name{138}='Set_DAQ_Device_Info'; fcns.calltype{138}='stdcall'; fcns.LHS{138}='int16'; fcns.RHS{138}={'int16', 'uint32', 'uint32'};
%  extern i16 _stdcall Timeout_Config ( i16 slot, i32 numTicks); 
fcns.name{139}='Timeout_Config'; fcns.calltype{139}='stdcall'; fcns.LHS{139}='int16'; fcns.RHS{139}={'int16', 'int32'};
%  extern i16 _stdcall WFM_Chan_Control ( i16 slot, i16 channel, i16 operation); 
fcns.name{140}='WFM_Chan_Control'; fcns.calltype{140}='stdcall'; fcns.LHS{140}='int16'; fcns.RHS{140}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall WFM_Check ( i16 slot, i16 channel, i16 * progress, u32 * itersDone, u32 * pointsDone); 
fcns.name{141}='WFM_Check'; fcns.calltype{141}='stdcall'; fcns.LHS{141}='int16'; fcns.RHS{141}={'int16', 'int16', 'int16Ptr', 'uint32Ptr', 'uint32Ptr'};
%  extern i16 _stdcall WFM_ClockRate ( i16 slot, i16 group, i16 whickClock, i16 timebase, u32 updateInterval, i16 mode); 
fcns.name{142}='WFM_ClockRate'; fcns.calltype{142}='stdcall'; fcns.LHS{142}='int16'; fcns.RHS{142}={'int16', 'int16', 'int16', 'int16', 'uint32', 'int16'};
%  extern i16 _stdcall WFM_DB_Config ( i16 slot, i16 numChans, i16 * chanVect, i16 DBMode, i16 oldDataStop, i16 partialTransfer); 
fcns.name{143}='WFM_DB_Config'; fcns.calltype{143}='stdcall'; fcns.LHS{143}='int16'; fcns.RHS{143}={'int16', 'int16', 'int16Ptr', 'int16', 'int16', 'int16'};
%  extern i16 _stdcall WFM_DB_HalfReady ( i16 slot, i16 numChans, i16 * chanVect, i16 * halfReady); 
fcns.name{144}='WFM_DB_HalfReady'; fcns.calltype{144}='stdcall'; fcns.LHS{144}='int16'; fcns.RHS{144}={'int16', 'int16', 'int16Ptr', 'int16Ptr'};
%  extern i16 _stdcall WFM_DB_Transfer ( i16 slot, i16 numChans, i16 * chanVect, i16 * buffer, u32 cnt); 
fcns.name{145}='WFM_DB_Transfer'; fcns.calltype{145}='stdcall'; fcns.LHS{145}='int16'; fcns.RHS{145}={'int16', 'int16', 'int16Ptr', 'int16Ptr', 'uint32'};
%  extern i16 _stdcall WFM_from_Disk ( i16 slot, i16 numChans, i16 * chanVect, i8 * fileName, u32 startPts, u32 endPts, u32 iterations, f64 rate); 
fcns.name{146}='WFM_from_Disk'; fcns.calltype{146}='stdcall'; fcns.LHS{146}='int16'; fcns.RHS{146}={'int16', 'int16', 'int16Ptr', 'int8Ptr', 'uint32', 'uint32', 'uint32', 'double'};
%  extern i16 _stdcall WFM_Group_Control ( i16 slot, i16 group, i16 operation); 
fcns.name{147}='WFM_Group_Control'; fcns.calltype{147}='stdcall'; fcns.LHS{147}='int16'; fcns.RHS{147}={'int16', 'int16', 'int16'};
%  extern i16 _stdcall WFM_Group_Setup ( i16 slot, i16 numChans, i16 * chanVect, i16 group); 
fcns.name{148}='WFM_Group_Setup'; fcns.calltype{148}='stdcall'; fcns.LHS{148}='int16'; fcns.RHS{148}={'int16', 'int16', 'int16Ptr', 'int16'};
%  extern i16 _stdcall WFM_Load ( i16 slot, i16 numChans, i16 * chanVect, i16 * buffer, u32 cnt, u32 iterations, i16 mode); 
fcns.name{149}='WFM_Load'; fcns.calltype{149}='stdcall'; fcns.LHS{149}='int16'; fcns.RHS{149}={'int16', 'int16', 'int16Ptr', 'int16Ptr', 'uint32', 'uint32', 'int16'};
%  extern i16 _stdcall WFM_Op ( i16 slot, i16 numChans, i16 * chanVect, i16 * buffer, u32 cnt, u32 iterations, f64 rate); 
fcns.name{150}='WFM_Op'; fcns.calltype{150}='stdcall'; fcns.LHS{150}='int16'; fcns.RHS{150}={'int16', 'int16', 'int16Ptr', 'int16Ptr', 'uint32', 'uint32', 'double'};
%  extern i16 _stdcall WFM_Rate ( f64 rate, i16 units, i16 * timebase, u32 * updateInterval); 
fcns.name{151}='WFM_Rate'; fcns.calltype{151}='stdcall'; fcns.LHS{151}='int16'; fcns.RHS{151}={'double', 'int16', 'int16Ptr', 'uint32Ptr'};
%  extern i16 _stdcall WFM_Scale ( i16 slot, i16 chan, u32 cnt, f64 gain, f64 * voltArray, i16 * binArray); 
fcns.name{152}='WFM_Scale'; fcns.calltype{152}='stdcall'; fcns.LHS{152}='int16'; fcns.RHS{152}={'int16', 'int16', 'uint32', 'double', 'doublePtr', 'int16Ptr'};
%  extern i16 _stdcall AI_Read_Scan ( i16 slot, i16 * reading); 
fcns.name{153}='AI_Read_Scan'; fcns.calltype{153}='stdcall'; fcns.LHS{153}='int16'; fcns.RHS{153}={'int16', 'int16Ptr'};
%  extern i16 _stdcall AI_VRead_Scan ( i16 slot, f64 * reading); 
fcns.name{154}='AI_VRead_Scan'; fcns.calltype{154}='stdcall'; fcns.LHS{154}='int16'; fcns.RHS{154}={'int16', 'doublePtr'};
%  extern i16 _stdcall SCXI_ModuleID_Read ( i16 scxiID, i16 moduleSlot, i32 * id); 
fcns.name{155}='SCXI_ModuleID_Read'; fcns.calltype{155}='stdcall'; fcns.LHS{155}='int16'; fcns.RHS{155}={'int16', 'int16', 'int32Ptr'};
%  extern i16 _stdcall AO_VScale ( i16 slot, i16 chan, f64 voltage, i16 * value); 
fcns.name{156}='AO_VScale'; fcns.calltype{156}='stdcall'; fcns.LHS{156}='int16'; fcns.RHS{156}={'int16', 'int16', 'double', 'int16Ptr'};
%  extern i16 _stdcall GPCTR_Change_Parameter ( i16 deviceNumber, u32 gpCounterNumber, u32 paramID, u32 paramValue); 
fcns.name{157}='GPCTR_Change_Parameter'; fcns.calltype{157}='stdcall'; fcns.LHS{157}='int16'; fcns.RHS{157}={'int16', 'uint32', 'uint32', 'uint32'};
%  extern i16 _stdcall DIG_Trigger_Config ( i16 slot, i16 grp, i16 startTrig, i16 startPol, i16 stopTrig, i16 stopPol, u32 ptsAfterStopTrig, u32 pattern, u32 patternMask); 
fcns.name{158}='DIG_Trigger_Config'; fcns.calltype{158}='stdcall'; fcns.LHS{158}='int16'; fcns.RHS{158}={'int16', 'int16', 'int16', 'int16', 'int16', 'int16', 'uint32', 'uint32', 'uint32'};
%  extern i16 _stdcall SCXI_Set_Threshold ( i16 chassisID, i16 moduleSlot, i16 channel, f64 threshHold, f64 hysteresis); 
fcns.name{159}='SCXI_Set_Threshold'; fcns.calltype{159}='stdcall'; fcns.LHS{159}='int16'; fcns.RHS{159}={'int16', 'int16', 'int16', 'double', 'double'};
%  extern i16 _stdcall WFM_Set_Clock ( i16 slot, i16 group, u32 whichClock, f64 desiredRate, u32 units, f64 * actualRate); 
fcns.name{160}='WFM_Set_Clock'; fcns.calltype{160}='stdcall'; fcns.LHS{160}='int16'; fcns.RHS{160}={'int16', 'int16', 'uint32', 'double', 'uint32', 'doublePtr'};
%  extern i16 _stdcall DAQ_Set_Clock ( i16 slot, u32 whichClock, f64 desiredRate, u32 units, f64 * actualRate); 
fcns.name{161}='DAQ_Set_Clock'; fcns.calltype{161}='stdcall'; fcns.LHS{161}='int16'; fcns.RHS{161}={'int16', 'uint32', 'double', 'uint32', 'doublePtr'};
%  extern i16 _stdcall Tio_Select_Signal ( i16 deviceNumber, u32 signal, u32 source, u32 sourceSpec); 
fcns.name{162}='Tio_Select_Signal'; fcns.calltype{162}='stdcall'; fcns.LHS{162}='int16'; fcns.RHS{162}={'int16', 'uint32', 'uint32', 'uint32'};
%  extern i16 _stdcall Tio_Combine_Signals ( i16 deviceNumber, u32 internalLine, u32 logicalExpression); 
fcns.name{163}='Tio_Combine_Signals'; fcns.calltype{163}='stdcall'; fcns.LHS{163}='int16'; fcns.RHS{163}={'int16', 'uint32', 'uint32'};
%  extern i16 _stdcall DIG_In_Prt ( i16 slot, i16 port, i32 * pattern); 
fcns.name{164}='DIG_In_Prt'; fcns.calltype{164}='stdcall'; fcns.LHS{164}='int16'; fcns.RHS{164}={'int16', 'int16', 'int32Ptr'};
%  extern i16 _stdcall DIG_Out_Prt ( i16 slot, i16 port, i32 pattern); 
fcns.name{165}='DIG_Out_Prt'; fcns.calltype{165}='stdcall'; fcns.LHS{165}='int16'; fcns.RHS{165}={'int16', 'int16', 'int32'};
%  extern i16 _stdcall AI_Get_Overloaded_Channels ( i16 deviceNumber, i16 * numChannels, i16 * channelList); 
fcns.name{166}='AI_Get_Overloaded_Channels'; fcns.calltype{166}='stdcall'; fcns.LHS{166}='int16'; fcns.RHS{166}={'int16', 'int16Ptr', 'int16Ptr'};
%  extern i16 _stdcall Calibrate_TIO ( i16 deviceNumber, u32 operation, u32 setOfCalConst, f64 referenceFreq); 
fcns.name{167}='Calibrate_TIO'; fcns.calltype{167}='stdcall'; fcns.LHS{167}='int16'; fcns.RHS{167}={'int16', 'uint32', 'uint32', 'double'};
%  extern i16 _stdcall DIG_Change_Message_Config ( i16 deviceNumber, i16 operation, i8 * riseChanStr, i8 * fallChanStr, HWND handle, i16 msg, u32 callBackAddr); 
fcns.name{168}='DIG_Change_Message_Config'; fcns.calltype{168}='stdcall'; fcns.LHS{168}='int16'; fcns.RHS{168}={'int16', 'int16', 'int8Ptr', 'int8Ptr', 'voidPtr', 'int16', 'uint32'};
%  extern i16 _stdcall DIG_Change_Message_Control ( i16 deviceNumber, i16 ctrlCode); 
fcns.name{169}='DIG_Change_Message_Control'; fcns.calltype{169}='stdcall'; fcns.LHS{169}='int16'; fcns.RHS{169}={'int16', 'int16'};
%  extern i16 _stdcall DIG_Filter_Config ( i16 deviceNumber, i16 mode, i8 * chanStr, f64 interval); 
fcns.name{170}='DIG_Filter_Config'; fcns.calltype{170}='stdcall'; fcns.LHS{170}='int16'; fcns.RHS{170}={'int16', 'int16', 'int8Ptr', 'double'};
%  extern i16 _stdcall SCXI_TerminalBlockID_Read ( i16 scxiID, i16 moduleSlot, i32 * id); 
fcns.name{171}='SCXI_TerminalBlockID_Read'; fcns.calltype{171}='stdcall'; fcns.LHS{171}='int16'; fcns.RHS{171}={'int16', 'int16', 'int32Ptr'};
%  extern i16 _stdcall ni62xx_CalStart ( i16 device, i8 * password); 
fcns.name{172}='ni62xx_CalStart'; fcns.calltype{172}='stdcall'; fcns.LHS{172}='int16'; fcns.RHS{172}={'int16', 'int8Ptr'};
%  extern i16 _stdcall ni62xx_CalAdjust ( i16 device, u32 calMode, f64 * measuredData, i16 numOfValues); 
fcns.name{173}='ni62xx_CalAdjust'; fcns.calltype{173}='stdcall'; fcns.LHS{173}='int16'; fcns.RHS{173}={'int16', 'uint32', 'doublePtr', 'int16'};
%  extern i16 _stdcall ni62xx_CalEnd ( i16 device, u32 calAction); 
fcns.name{174}='ni62xx_CalEnd'; fcns.calltype{174}='stdcall'; fcns.LHS{174}='int16'; fcns.RHS{174}={'int16', 'uint32'};
%  extern i16 _stdcall ni62xx_SelfCalibrate ( i16 device); 
fcns.name{175}='ni62xx_SelfCalibrate'; fcns.calltype{175}='stdcall'; fcns.LHS{175}='int16'; fcns.RHS{175}={'int16'};
%  extern i16 _stdcall CalFetchInternalReference ( i16 device, f64 * referenceValue); 
fcns.name{176}='CalFetchInternalReference'; fcns.calltype{176}='stdcall'; fcns.LHS{176}='int16'; fcns.RHS{176}={'int16', 'doublePtr'};
%  extern i16 _stdcall CalChangePassword ( i16 device, i8 * oldPassword, i8 * newPassword); 
fcns.name{177}='CalChangePassword'; fcns.calltype{177}='stdcall'; fcns.LHS{177}='int16'; fcns.RHS{177}={'int16', 'int8Ptr', 'int8Ptr'};
%  extern i16 _stdcall CalFetchCount ( i16 device, u32 calType, i32 * calCount); 
fcns.name{178}='CalFetchCount'; fcns.calltype{178}='stdcall'; fcns.LHS{178}='int16'; fcns.RHS{178}={'int16', 'uint32', 'int32Ptr'};
%  extern i16 _stdcall CalFetchDate ( i16 device, u32 calType, i32 * year, i32 * month, i32 * day); 
fcns.name{179}='CalFetchDate'; fcns.calltype{179}='stdcall'; fcns.LHS{179}='int16'; fcns.RHS{179}={'int16', 'uint32', 'int32Ptr', 'int32Ptr', 'int32Ptr'};
%  extern i16 _stdcall CalFetchTemperature ( i16 device, u32 calType, f64 * temperature); 
fcns.name{180}='CalFetchTemperature'; fcns.calltype{180}='stdcall'; fcns.LHS{180}='int16'; fcns.RHS{180}={'int16', 'uint32', 'doublePtr'};
%  extern i16 _stdcall CalFetchMiscInfo ( i16 device, i8 * miscInfo); 
fcns.name{181}='CalFetchMiscInfo'; fcns.calltype{181}='stdcall'; fcns.LHS{181}='int16'; fcns.RHS{181}={'int16', 'int8Ptr'};
%  extern i16 _stdcall CalStoreMiscInfo ( i16 device, i8 * miscInfo); 
fcns.name{182}='CalStoreMiscInfo'; fcns.calltype{182}='stdcall'; fcns.LHS{182}='int16'; fcns.RHS{182}={'int16', 'int8Ptr'};
%  extern i16 _stdcall Get_DAQ_Event ( u32 timeOut, i16 * handle, i16 * msg, i16 * wParam, i32 * lParam); 
fcns.name{183}='Get_DAQ_Event'; fcns.calltype{183}='stdcall'; fcns.LHS{183}='int16'; fcns.RHS{183}={'uint32', 'int16Ptr', 'int16Ptr', 'int16Ptr', 'int32Ptr'};
%  extern i16 _stdcall Peek_DAQ_Event ( u32 timeOut, i16 * handle, i16 * msg, i16 * wParam, i32 * lParam); 
fcns.name{184}='Peek_DAQ_Event'; fcns.calltype{184}='stdcall'; fcns.LHS{184}='int16'; fcns.RHS{184}={'uint32', 'int16Ptr', 'int16Ptr', 'int16Ptr', 'int32Ptr'};
%  extern i16 _stdcall REG_Level_Read ( i16 slot, i16 registerIndex, u32 * registerValue); 
fcns.name{185}='REG_Level_Read'; fcns.calltype{185}='stdcall'; fcns.LHS{185}='int16'; fcns.RHS{185}={'int16', 'int16', 'uint32Ptr'};
%  extern i16 _stdcall REG_Level_Write ( i16 slot, i16 registerIndex, u32 bitsAffected, u32 bitSettings, u32 * registerValue); 
fcns.name{186}='REG_Level_Write'; fcns.calltype{186}='stdcall'; fcns.LHS{186}='int16'; fcns.RHS{186}={'int16', 'int16', 'uint32', 'uint32', 'uint32Ptr'};
enuminfo.tagSHGDN=struct('SHGDN_NORMAL',0,'SHGDN_INFOLDER',1,'SHGDN_FORPARSING',32768);
enuminfo.tagSTGMOVE=struct('STGMOVE_MOVE',0,'STGMOVE_COPY',1);
enuminfo.tagSHCONTF=struct('SHCONTF_FOLDERS',32,'SHCONTF_NONFOLDERS',64,'SHCONTF_INCLUDEHIDDEN',128);
enuminfo.tagSTATFLAG=struct('STATFLAG_DEFAULT',0,'STATFLAG_NONAME',1);
enuminfo.tagMSHCTX=struct('MSHCTX_LOCAL',0,'MSHCTX_NOSHAREDMEM',1,'MSHCTX_DIFFERENTMACHINE',2,'MSHCTX_INPROC',3);
enuminfo.tagDVASPECT=struct('DVASPECT_CONTENT',1,'DVASPECT_THUMBNAIL',2,'DVASPECT_ICON',4,'DVASPECT_DOCPRINT',8);
enuminfo.SECURITY_IMPERSONATION_LEVEL=struct('SecurityAnonymous',1,'SecurityIdentification',2,'SecurityImpersonation',3,'SecurityDelegation',4);
enuminfo.ACL_INFORMATION_CLASS=struct('AclRevisionInformation',1,'AclSizeInformation',2);
enuminfo.TOKEN_INFORMATION_CLASS=struct('TokenUser',1,'TokenGroups',2,'TokenPrivileges',3,'TokenOwner',4,'TokenPrimaryGroup',5,'TokenDefaultDacl',6,'TokenSource',7,'TokenType',8,'TokenImpersonationLevel',9,'TokenStatistics',10);
enuminfo.SID_NAME_USE=struct('SidTypeUser',1,'SidTypeGroup',2,'SidTypeDomain',3,'SidTypeAlias',4,'SidTypeWellKnownGroup',5,'SidTypeDeletedAccount',6,'SidTypeInvalid',7,'SidTypeUnknown',8);
enuminfo.tagSTGC=struct('STGC_DEFAULT',0,'STGC_OVERWRITE',1,'STGC_ONLYIFCURRENT',2,'STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE',4);
enuminfo.tagMSHLFLAGS=struct('MSHLFLAGS_NORMAL',0,'MSHLFLAGS_TABLESTRONG',1,'MSHLFLAGS_TABLEWEAK',2);
enuminfo.tagCLSCTX=struct('CLSCTX_INPROC_SERVER',1,'CLSCTX_INPROC_HANDLER',2,'CLSCTX_LOCAL_SERVER',4,'CLSCTX_INPROC_SERVER16',8);
enuminfo.tagTOKEN_TYPE=struct('TokenPrimary',1,'TokenImpersonation',2);
methodinfo=fcns;